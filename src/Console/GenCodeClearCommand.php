<?php

namespace Slowlyo\OwlAdmin\Console;

use Slowlyo\OwlAdmin\Admin;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Slowlyo\OwlAdmin\Models\AdminCodeGenerator;
use Slowlyo\OwlAdmin\Support\CodeGenerator\BaseGenerator;

class GenCodeClearCommand extends Command
{
    protected $signature = 'admin:gen-code-clear {--id=}';

    protected $description = 'Clear code generated by code generator.';

    protected string $module;

    public function handle(): void
    {
        $record = $this->checkOption();

        $controllerPath = BaseGenerator::guessClassFileName(str_replace('/', '\\', $record->controller_name));
        $modelPath      = BaseGenerator::guessClassFileName(str_replace('/', '\\', $record->model_name));
        $servicePath    = BaseGenerator::guessClassFileName(str_replace('/', '\\', $record->service_name));
        $tableName      = $record->table_name;
        $migrationPath  = $this->getMigrationFileName($tableName, $record->model_name);
        $menuRecord     = $this->getMenu($record->menu_info);

        // confirm
        $content = [
            ['controller', $controllerPath],
            ['model', $modelPath],
            ['service', $servicePath],
            ['migration', $migrationPath],
        ];

        if ($menuRecord) {
            $content[] = [
                'menu',
                sprintf('[%s] %s(%s)', $menuRecord->id, $menuRecord->title, $menuRecord->url),
            ];
        }

        $this->table(['Type', 'Value'], $content);

        if (!$this->confirm('Do you want to clear these content?')) {
            $this->info('Clear canceled.');
            exit;
        }

        // clear
        $this->info('Clearing...');
        $this->info('- Clearing controller...');
        $this->clearFile($controllerPath);
        $this->newLine();

        $this->info('- Clearing model...');
        $this->clearFile($modelPath);
        $this->newLine();

        $this->info('- Clearing service...');
        $this->clearFile($servicePath);
        $this->newLine();

        $this->info('- Clearing migration...');
        $this->clearFile($migrationPath);
        $this->newLine();

        $this->info('- Clearing menu...');
        if ($menuRecord) {
            if ($menuRecord->delete()) {
                $this->info('Delete successfully.');
            } else {
                $this->error('Delete failed.');
            }
        }
        $this->newLine();

        $this->info('- Refresh route...');
        $this->call('admin:gen-route', ['--excluded' => $record->id]);
        DB::table('migrations')->where('migration', 'like', "%create_{$tableName}_table")->delete();
        Schema::dropIfExists($tableName);

        $this->newLine();
        $this->info('Clear successfully.');
    }

    protected function checkOption()
    {
        if (!$this->option('id')) {
            $this->error('Please input id.');
            $this->info('Example: php artisan admin:gen-code-clear --id=1');
            exit;
        }

        $record = AdminCodeGenerator::query()->find($this->option('id'));

        if (!$record) {
            $this->error('Record not found.');
            exit;
        }

        $arr = explode('/', $record->model_name);

        if ($arr[0] == Admin::module()->namespace) {
            $this->module = $arr[1];
        }

        return $record;
    }

    protected function getMigrationFileName($tableName, $model_name)
    {
        $tableName = 'create_' . $tableName . '_table';

        $migrationPath = BaseGenerator::guessClassFileName($model_name);
        if ($this->module) {
            $migrationPath = str_replace('/Models/', '/database/migrations/', $migrationPath);
        } else {
            $migrationPath = str_replace('/Models/', '/../database/migrations/', $migrationPath);
        }
        $migrationPath = dirname($migrationPath);

        if (!is_dir($migrationPath)) {
            return '';
        }
        $files = scandir($migrationPath);

        $files = array_filter($files, fn($file) => str_contains($file, $tableName));

        if (count($files) > 1) {
            $this->error('Found more than one migration file.');

            return '';
        }

        if (count($files) == 0) {
            $this->error('Migration file not found.');

            return '';
        }

        $files = array_values($files);

        return realpath($migrationPath . '/' . $files[0]);
    }

    protected function getMenu($menuInfo)
    {
        $where = [
            'title'     => $menuInfo['title'],
            'parent_id' => $menuInfo['parent_id'],
            'url'       => '/' . ltrim($menuInfo['route'], '/'),
        ];

        if ($this->module) {
            $menuModel = config(Admin::module()->getLowerName($this->module) . '.admin.models.admin_menu');

            if (class_exists($menuModel)) {
                return $menuModel::query()->where($where)->first();
            }
        }

        return Admin::adminMenuModel()::query()->where($where)->first();
    }

    protected function clearFile($path)
    {
        if (!file_exists($path)) {
            $this->error('File not found.');
            return;
        }

        if (!unlink($path)) {
            $this->error('Clear failed.');
            return;
        }

        $this->info('Clear successfully.');
    }
}
